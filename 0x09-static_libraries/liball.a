!<arch>
0-isupper.c/    0           0     0     644     277       `
#include "main.h"
/**
 * _isupper - checks for uppercase character
 * @c: argument to be passed to the function to check the case
 * Return: 1 if uppercase and 0 if otherwise
 */
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}


0-memset.c/     0           0     0     644     371       `
#include "main.h"
/**
 * _memset - fill a block of memory with a specific value
 * @s: starting address of memory to be filled
 * @b: the desired value
 * @n: number of bytes to be changed
 *
 * Return: changed array with new value for n bytes
 */
char *_memset(char *s, char b, unsigned int n)
{
	int i;

	for (i = 0; n > 0; i++)
	{
		s[i] = b;
		n--;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     350       `
#include "main.h"
/**
 * _strcat - a function that concatenates two strings
 * @dest: destination string
 * @src: source string
 * Return: pointer to char
 */
char *_strcat(char *dest, char *src)
{
	char *des = dest;

	while (*des != '\0')
	{
		des++;
	}

	while (*src != '\0')
	{
		*des = *src;
		des++;
		src++;
	}
	*des = '\0';

	return (dest);
}
100-atoi.c/     0           0     0     644     392       `
#include "main.h"
/**
 * _atoi - a function that convert a string to an integer
 * @s: string to be converted
 * Return: integer value of the converted string, otherwise 0
 */
int _atoi(char *s)
{
int sign = 1;
unsigned int num = 0;
do {
if (*s == '-')
sign *= -1;
else if (*s >= '0' && *s <= '9')
num = (num * 10) + (*s - '0');
else if (num > 0)
break;
} while (*s++);
return (num *sign);
}
1-isdigit.c/    0           0     0     644     266       `
#include "main.h"
/**
 * _isdigit - checks for a digit (0 through 9)
 * @c: character passed as an argument to the function
 * Return: 1 if digit and 0 if otherwise
 */
int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
1-memcpy.c/     0           0     0     644     357       `
#include "main.h"
/**
 *_memcpy - a function that copies memory area
 *@dest: memory where is stored
 *@src: memory where is copied
 *@n: number of bytes
 *
 *Return: copied memory with n bytes changed
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	int x = 0;
	int i = n;

	for (; x < i; x++)
	{
		dest[x] = src[x];
		n--;
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     403       `
#include "main.h"
/**
 * _strncat - a function that concatenates two strings
 * @dest: destination string
 * @src: source string
 * @n: number of bytes
 * Return: pointer to char
 */
char *_strncat(char *dest, char *src, int n)
{
	char *des = dest;

	while (*dest != '\0')
	{
		dest++;
	}

	while (*src != '\0' && n > 0)
	{
		*dest = *src;
		dest++;
		src++;
		n--;
	}

	*dest = '\0';

	return (des);
}

2-strchr.c/     0           0     0     644     307       `
#include "main.h"
/**
 * _strchr - a function that locates a
 * character in a string.
 * @s: string to search
 * @c: character searched for
 * Return: Always 0 (Success)
 */
char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
			return (&s[i]);
	}
	return (0);
}


2-strlen.c/     0           0     0     644     218       `
#include "main.h"
#include <string.h>
/**
 * _strlen - that returns the length of a string.
 * @s: string to be checked in the function
 * Return: length of the string
 */
int _strlen(char *s)
{
	return (strlen(s));
}
2-strncpy.c/    0           0     0     644     337       `
#include "main.h"
#include <string.h>
/**
 * _strncpy - a function that copies a string
 * @dest: destination string
 * @src: source string
 * @n: number of times to copy
 * Return: pointer to destination char
 */
char *_strncpy(char *dest, char *src, int n)
{
	char *des = dest;

	strncpy(dest, src, n);
	dest = '\0';

	return (des);
}

3-islower.c/    0           0     0     644     242       `
#include "main.h"

/**
 * _islower - Return 1 if letter is lowercase, 0 if not.
 * @c: char type letter
 * Return: 1 if lowercase, 0 if not lowercase
 */

int _islower(int c)
{
if (c >= 'a' && c <= 'z')
{
return (1);
}
else
{
return (0);
}
}
3-puts.c/       0           0     0     644     249       `
#include "main.h"
#include <string.h>

/**
 * _puts - prints a string, followed by a new line, to stdout
 * @str: the string to be printed
 */
void _puts(char *str)
{
int i;

for (i = 0; str[i] != '\0' ; i++)
{
_putchar(str[i]);
}
_putchar('\n');
}

3-strcmp.c/     0           0     0     644     265       `
#include "main.h"
#include <string.h>
/**
 * _strcmp - a function that compares two strings
 * @s1: first string
 * @s2: second string
 * Return: int value based on result of cmp
 */
int _strcmp(char *s1, char *s2)
{
int result = strcmp(s1, s2);
return (result);
}

3-strspn.c/     0           0     0     644     422       `
#include "main.h"
/**
 * _strspn - a function that gets the length
 * of a prefix substring.
 * @s: string
 * @accept: prefix substring
 * Return: 0 (Success)
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int n = 0;
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (*s == accept[i])
			{
				n++;
				break;
			}
			else if (accept[i + 1] == '\0')
				return (n);
		}
		s++;
	}
	return (n);
}
4-isalpha.c/    0           0     0     644     286       `
#include "main.h"

/**
 * _isalpha - Check if character is an alphabetic character.
 * @c: type int character
 * Return: 1 if letter, lowercase or uppercase, and 0 otherwise
 */

int _isalpha(int c)
{
if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))
return (1);
else
return (0);
}
4-strpbrk.c/    0           0     0     644     342       `
#include "main.h"
/**
 * _strpbrk - a function that searches a
 * string for any of a set of bytes.
 * @s: string to be searched
 * @accept: string to locate
 * Return: Always 0 (Success)
 */
char *_strpbrk(char *s, char *accept)
{
int a;

while (*s)
{
for (a = 0; accept[a]; a++)
{
if (*s == accept[a])
return (s);
}
s++;
}
return ('\0');
}
5-strstr.c/     0           0     0     644     404       `
#include "main.h"
/**
 * _strstr - a function that locates a substring.
 * @haystack: main string
 * @needle: substring instance
 * Return: 0 (Success)
 */
char *_strstr(char *haystack, char *needle)
{
	for (; *haystack != '\0'; haystack++)
	{
		char *l = haystack;
		char *p = needle;

		while (*l == *p && *p != '\0')
		{
			l++;
			p++;
		}

		if (*p == '\0')
			return (haystack);
	}

	return (0);
}
6-abs.c/        0           0     0     644     211       `
#include "main.h"

/**
 * _abs - computes the absolute value of an integer
 * @n: the int to check
 * Return: the absolute value of int
 */

int _abs(int n)
{
if (n >= 0)
{
return (n);
}
else
{
return (-n);
}
}

9-strcpy.c/     0           0     0     644     476       `
#include "main.h"

/**
 * *_strcpy - copies the string pointed to by src
 * including the terminating null byte (\0)
 * to the buffer pointed to by dest
 * @dest: pointer to the buffer in which we copy the string
 * @src: string to be copied
 *
 * Return: the pointer to dest
 */

char *_strcpy(char *dest, char *src)
{
	int len, i;

	len = 0;

	while (src[len] != '\0')
	{
		len++;
	}

	for (i = 0; i < len; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';

	return (dest);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

